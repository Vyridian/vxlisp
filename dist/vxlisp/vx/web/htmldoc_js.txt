  static vx_global = {context    : vx_core.e_context,
                      listenermap: {}}

  static vx_boolean_print_from_id_stylesheettext(id, stylesheettext) {
    const text = document.getElementById(id).innerHTML
    const win = window.open('', 'Print', 'popup=true')
    const doctext = '' +
     '<html>\n' +
     '<head>\n' +
     stylesheettext + '\n' +
     '</head>\n' +
     '<body>\n' +
     text + '\n'
     '</body>\n' +
     '</html>'
    win.document.write(doctext)
    win.document.write('</body></html>')
    win.document.close()
    win.print()
  }

  static vx_boolean_replace_from_id_htmltext(id, htmltext) {
    let output = vx_core.c_false
    const elem = document.getElementById(id)
    if (elem != null) {
      elem.outerHTML = htmltext
      output = vx_core.c_true
    }
    return output
  }

  static vx_boolean_replace_from_id_parent_htmltext(id, parent, htmltext) {
    let output = vx_core.c_false
    let elem = document.getElementById(id)
    if (elem != null) {
      elem.outerHTML = htmltext
      output = vx_core.c_true
    } else {
      const elemparent = document.getElementById(parent)
      if (elemparent != null) {
        elem = document.createElement("div")
        elemparent.appendChild(elem)
        elem.outerHTML = htmltext
        output = vx_core.c_true
      }
    }
    return output
  }

  static vx_boolean_remove_from_id(id) {
    let output = vx_core.c_false
    let elem = document.getElementById(id)
    if (elem != null) {
      elem.remove()
      output = vx_core.c_true
    }
    return output
  }

  static vx_boolean_write_from_id_attribute_value(id, attribute, value) {
    let output = vx_core.c_false
    const elem = document.getElementById(id)
    if (elem != null) {
      const oldvalue = elem.getAttribute(attribute)
      if (oldvalue == null) {
        elem.setAttribute(attribute, value)
      } else if (oldvalue != value) {
        elem.setAttribute(attribute, value)
      }
      output = vx_core.c_true
    }
    return output
  }

  static vx_boolean_write_from_id_htmltext(id, htmltext) {
    let output = vx_core.c_false
    const elem = document.getElementById(id)
    if (elem != null) {
      elem.innerHTML = htmltext
      output = vx_core.c_true
    }
    return output
  }

  static vx_boolean_write_from_id_maplistener(id, maplistener) {
    vx_web_htmldoc.vx_global['listenermap'][id] = maplistener
    return vx_core.c_true
  }

  static vx_boolean_write_from_id_visible(id, visible) {
    let output = vx_core.c_false
    const elem = document.getElementById(id)
    if (elem != null) {
      elem.hidden = !visible
      output = vx_core.c_true
    }
    return output
  }

  static vx_boolean_writeevents_from_ui(ui) {
    let output = vx_core.c_false
    const eventmap = vx_core.f_any_from_struct({'any-1': vx_event.t_eventmap}, ui, ':eventmap')
    if (eventmap == vx_event.e_eventmap) {
      output = vx_core.c_true
    } else {
      const id = vx_core.f_any_from_struct({'any-1': vx_core.t_string}, ui, ':uid')
      let elem = document.getElementById(id)
      if (elem != null) {
        const maplistenerold = vx_web_htmldoc.vx_maplistener_read_from_id(id)
        if (maplistenerold) {
          vx_web_htmldoc.vx_boolean_write_from_id_maplistener(id, {})
          for (const [nativeeventname, listener] of Object.entries(maplistenerold)) {
            elem.removeEventListener(nativeeventname, listener)
          }
        }
        if (eventmap != vx_event.e_eventmap) {
          elem = document.getElementById(id)
          const maplistener = {}
          for (const [eventname, event] of Object.entries(eventmap['vx_value'])) {
            const listener = (nativeevent) => {
              const context = vx_web_htmldoc.vx_context_read()
              const eventchg = vx_web_htmldoc.vx_event_from_event_id_nativeevent(event, id, nativeevent)
              const fn_event = event['vx_value']['event<-event']
              const fn_event_async = event['vx_value']['event<-event']
              let eventoutput = null
              if (fn_event != vx_event.e_event_from_event) {
                eventoutput = vx_core.vx_any_from_func(vx_event.t_event, fn_event, context, eventchg)
              } else if (fn_event_async != vx_event.e_event_from_event) {
                eventoutput = vx_core.vx_any_from_func_async(vx_event.t_event, fn_event_async, context, eventchg)
              }
              return eventoutput
            }
            const nativeeventname = vx_web_htmldoc.vx_nativeeventname_from_eventname(eventname)
            elem.addEventListener(nativeeventname, listener)
            maplistener[nativeeventname] = maplistener
          }
          vx_web_htmldoc.vx_boolean_write_from_id_maplistener(id, maplistener)
        }
        output = vx_core.c_true
      }
    }
    return output
  }

  static vx_boolean_writestate_from_ui(ui) {
    const context = vx_web_htmldoc.vx_context_read()
    return vx_ui_ui.f_boolean_writestate_from_ui(context, ui)
  }

  static async vx_boolean_write_stylesheet_from_string(text) {
    let output = vx_core.c_false
    const cssstylesheet = new CSSStyleSheet()
    document.adoptedStyleSheets = [cssstylesheet]
    const css = await cssstylesheet.replace(text)
    output = vx_core.c_true
    return output
  }

  static vx_context_read() {
    let output = vx_core.e_context
    const context = vx_web_htmldoc.vx_global['context']
    if (context) {
      output = context
    }
    return output
  }

  static vx_context_write(context) {
    let output = context
    vx_web_htmldoc.vx_global['context'] = context
    return output
  }

  static vx_element_from_id(id) {
    const output = document.getElementById(id)
    return output
  }

  static vx_event_from_event_id_nativeevent(event, id, nativeevent) {
    const output = vx_core.f_copy(event, ":from", id)
    return output
  }

  static vx_maplistener_read_from_id(id) {
    return vx_web_htmldoc.vx_global.listenermap[id]
  }

  static vx_nativeeventname_from_eventname(eventname) {
    let output = eventname
    return output
  }

  static vx_string_from_id(id) {
    let output = vx_core.e_string
    const elem = document.getElementById(id)
    if (!elem) {
    } else if (elem.value) {
      output = elem.value
    } else if (elem.value) {
      output = elem.innerHTML
    }
    return output
  }

  static vx_ui_readstate_from_uid(uid) {
    let output = vx_ui_ui.e_ui
    const context = vx_web_htmldoc.vx_context_read()
    output = vx_ui_ui.f_ui_readstate_from_id(context, uid)
    return output
  }

  static vx_write_image_from_uid_ext(uid, ext) {
    // Get the div element you want to convert 
    const divElement = document.getElementById(uid)
    
    // Create a canvas element 
    const canvas = document.createElement('canvas')
    const context = canvas.getContext('2d')
    
    // Set the canvas dimensions to match the div 
    canvas.width = divElement.offsetWidth
    canvas.height = divElement.offsetHeight
    
    // Render the div content to the canvas 
    context.drawImage(divElement, 0, 0)
    
    // Convert the canvas to a data URL 
    const imageDataURL = canvas.toDataURL('image/' + ext, 0.9)
    // 0.9 is the quality (0-1) 
    
    // Create a link element to trigger the download 
    const link = document.createElement('a')
    link.download = 'my-image.jpg'
    link.href = imageDataURL
    
    // Append the link to the document and click it 
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link);
}