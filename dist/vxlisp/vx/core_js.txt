  // vx_any_from_func(generic_any_1, func, args...)
  static vx_any_from_func(
    generic_any_1,
    func,
    ...args
  ) {
    let output = vx_core.vx_empty(generic_any_1)
    const funcdef = func['vx_value']
    if (funcdef) {
      const fn = funcdef['fn']
      output = fn.apply(null, args)
    }
    return output
  }

  // vx_any_from_map_start_reduce(any-1, map-2, any-1, any<-any-key-value)
  static vx_any_from_map_start_reduce(
    generic_any_1,
    map,
    start,
    fn_reduce
  ) {
    let output = start
    const fn = fn_reduce['vx_value']
    if (fn) {
      const mapval = map['vx_value']
      for (let key in mapval) {
        const value = mapval[key]
        output = fn(output, key, value)
      }
    }
    return output
  }

  // vx_boolean_from_string_ends(string, string)
  static vx_boolean_from_string_ends(
    text,
    ends
  ) {
    return text.endsWith(ends)
  }

  // vx_boolean_from_string_find(string, string)
  static vx_boolean_from_string_find(
    text,
    find
  ) {
    return text.includes(find)
  }

  // vx_boolean_from_string_starts(string, string)
  static vx_boolean_from_string_starts(
    text,
    starts
  ) {
    return text.startsWith(starts);
  }

  // vx_boolean_write_from_map_name_value(map-1, string, any-1)
  static vx_boolean_write_from_map_name_value(
    valuemap,
    name,
    value
  ) {
    let output = vx_core.c_true
    const mapany = valuemap['vx_value']
    let key = name
    if (key.startsWith(':')) {
      key = key.substring(1)
    }
    if (vx_core.f_is_empty_1(value)) {
      delete mapany[key]
    } else {
      mapany[key] = value
    }
    return output
  }

  // vx_constdef_new(pkgname, name, type)
  static vx_constdef_new(
    pkgname,
    name,
    type
  ) {
    let output = {
      vx_type: vx_core.t_constdef,
      vx_value: {
        pkgname: pkgname,
        name: name,
        type: type
      }
    }
    return output
  }

  // vx_constdef<-any(any)
  static vx_constdef_from_any(
    value
  ) {
    let output = vx_core.e_constdef
    switch (value) {
    case vx_core.c_false:
      output = vx_core.vx_constdef_new(
        "vx/core", "false", vx_core.t_boolean)
      break
    case vx_core.c_true:
      output = vx_core.vx_constdef_new(
        "vx/core", "true", vx_core.t_boolean)
      break
    default:
      output = value['vx_constdef']
      if (output == null) {
        output = vx_core.e_constdef
      }
    }
    return output
  }

  static vx_empty(
    type
  ) {
    const typedef = vx_core.f_typedef_from_type(type)
    const pkgname = typedef['vx_value'].pkgname
    const typename = typedef['vx_value'].name
    const global = vx_core.c_global
    const globalvalue = global['vx_value']
    const pkgmap = globalvalue['packagemap']
    const mappkg = pkgmap['vx_value']
    const pkg = mappkg[pkgname]
    const emptymap = pkg['vx_value']['emptymap']
    const output = emptymap['vx_value'][typename]
    return output
  }

  static vx_eq(
    val1,
    val2
  ) {
    const native1 = vx_core.f_native_from_any(val1)
    const native2 = vx_core.f_native_from_any(val2)
    let output = true
    if (val1 === val2) {
    } else if (native1 === native2) {
    } else {
      const typename = typeof native1
      switch (typename) {
      case 'number':
        if (isNaN(native1) && isNaN(native2)) {
        } else {
          output = false
        }
        break
      case 'boolean':
      case 'string':
        output = false
        break
      default:
        const type1 = vx_core.f_type_from_any(val1)
        const type2 = vx_core.f_type_from_any(val2)
        const extends1 = vx_core.f_extends_from_typedef(type1)
        const extends2 = vx_core.f_extends_from_typedef(type2)
        if (type1 != type2) {
          output = false
        } else if (extends1 != extends2) {
          output = false
        } else {
          const sval1 = vx_core.vx_string_from_any(val1)
          const sval2 = vx_core.vx_string_from_any(val2)
          if (sval1 != sval2) {
            output = false
          }
        }
        break
      }
    }
    return output
  }

  static vx_float_from_string(
    text
  ) {
    const output = parseFloat(text)
    return output
  }

  // vx_global_package_set(package)
  static vx_global_package_set(
    pkg
  ) {
    const global = vx_core.c_global
    let globalvalue = global['vx_value']
    if (globalvalue == undefined) {
      globalvalue = {}
      global['vx_value'] = globalvalue
    }
    const pkgname = pkg['vx_value']['name']
    let mappackage = {}
    let packagemap = globalvalue['packagemap']
    if (packagemap == undefined) {
      mappackage[pkgname] = pkg
      packagemap = vx_core.vx_new_map(vx_core.t_packagemap, mappackage)
      globalvalue['packagemap'] = packagemap
    } else {
      mappackage = packagemap['vx_value']
      mappackage[pkgname] = pkg
    }
  }

  // vx_is_allowtype(allowtypes, typedef)
  static vx_is_allowtype(
    allowtypes,
    typedef
  ) {
    let output = false
    if (allowtypes.includes(typedef)) {
      output = true
    } else {
      const traits = vx_core.f_traits_from_typedef(typedef)
      const intersection = allowtypes.filter(function(n) {
        return traits.indexOf(n) > -1
      })
      if (intersection.length > 0) {
        output = true
      }
    }
    return output
  }

  // vx_is_float(any)
  static vx_is_float(
    value
  ) {
    let output = false
    const typename = vx_core.f_typename_from_any(value)
    switch (typename) {
    case 'vx/core/int':
      output = true
      break
    case 'vx/core/number':
      if (parseInt(value) == value) {
        output = true
      }
      break
    case 'vx/core/string':
      const floatval = parseFloat(value)
      if (!isNaN(floatval)) {
        output = true
      }
      break
    }
    return output
  }

  // vx_is_int(any)
  static vx_is_int(
    value
  ) {
    let output = false
    switch (value) {
    case vx_core.c_infinity:
    case vx_core.c_neginfinity:
    case vx_core.c_notanumber:
      output = true
      break
    default:
      const typename = vx_core.f_typename_from_any(value)
      switch (typename) {
      case 'vx/core/int':
        output = true
        break
      case 'vx/core/number':
        if (parseInt(value) == value) {
          output = true
        }
        break
      case 'vx/core/string':
        switch (value) {
        case 'notanumber':
        case 'infinity':
        case 'neginfinity':
          output = true
          break
        default:
          const parseint = parseInt(value)
          if (Number.isNaN(parseint)) {
          } else if (parseInt(value) == parseFloat(value)) {
            output = true
          }
          break
        }
        break
      }
      break
    }
    return output
  }

  static vx_list_from_list_intany(
    generic_list_1,
    valuelist,
    fn_any_from_int_any
  ) {
    let output = vx_core.f_empty(generic_list_1)
    const fn = fn_any_from_int_any['vx_value']
    if (fn) {
      output = []
      output['vx_type'] = generic_list_1
      for (let i = 0; i < valuelist.length; i++) {
        const value = valuelist[i]
        const outval = fn(i+1, value)
        output[i] = outval
      }
    }
    return output
  }

  static vx_list_from_map_fn(
    generic_list_1,
    valuemap,
    fn_any_from_key_value
  ) {
    let output = vx_core.f_empty(generic_list_1)
    const fn = fn_any_from_key_value['vx_value']
    if (fn) {
      const entries = Object.entries(valuemap['vx_value'])
      const values = entries.map(fn)
      output = vx_core.f_new_from_type(generic_list_1, ...values)
    }
    return output
  }

  // vx_map_from_map_fn(map-1, anymap, (fn : any-1 [key : string value : any-2]))
  static vx_map_from_map_fn(
    generic_map_1,
    valuemap,
    fn_any_from_key_value
  ) {
    let output = vx_core.f_empty(generic_map_1)
    const fn = fn_any_from_key_value['vx_value']
    if (fn) {
      const typedef = vx_core.f_typedef_from_any(
        generic_map_1
      )
      const allowtypes = vx_core.f_allowtypes_from_typedef(
        typedef
      )
      const entries = Object.entries(valuemap['vx_value'])
      const values = []
      for (const [key, value] of entries) {
        if (key != "") {
          const chgvalue = fn([key, value])
          const chgtype = vx_core.f_typedef_from_any(chgvalue)
          if (vx_core.vx_is_allowtype(allowtypes, chgtype)) {
            values.push(key)
            values.push(chgvalue)
          }
        }
      }
      output = vx_core.f_new_from_type(
        generic_map_1, ...values
      )
    }
    return output
  }

  // vx_msgblock_from_any(any)
  static vx_msgblock_from_any(
    value
  ) {
    let output = vx_core.e_msgblock
    if (typeof value == 'object') {
      const msgblock = value['vx_msgblock']
      if (msgblock) {
        output = msgblock
      }
    }
    return output
  }

  // vx_msgblock_from_copy_listval(any, listany)
  static vx_msgblock_from_copy_listval(
    copy,
    values
  ) {
    let output = vx_core.e_msgblock
    let msgblock = vx_core.vx_msgblock_from_any(copy)
    const listmsgblock = []
    if (msgblock != vx_core.e_msgblock) {
      listmsgblock.push(msgblock)
    }
    for (const subobj of values) {
      const submsgblock = vx_core.vx_msgblock_from_any(subobj)
      if (submsgblock != vx_core.e_msgblock) {
        listmsgblock.push(submsgblock)
      }
    }
    switch (listmsgblock.length) {
    case 0:
      break
    case 1:
      output = listmsgblock[0]
      break
    default:
      const msgblocks = listmsgblock
      msgblocks['vx_type'] = vx_core.t_msgblocklist
      const work = {}
      work['vx_type'] = vx_core.t_msgblock
      work['vx_value'] = {msgblocks: msgblocks}
      output = work
      break
    }
    return output
  }

  // vx_new(any, listany)
  static vx_new(
    type,
    values
  ) {
    let output
    if (values.length == 1) {
      // check if anylist passed as the only value
      const val1 = values[0]
      const val1typedef = val1['vx_type']
      if (val1typedef == undefined) {
      } else if (val1typedef == vx_core.t_anylist) {
        values = val1
      }
    }
    const typedef = vx_core.f_typedef_from_any(type)
    const copy = type
    let msgblock = vx_core.vx_msgblock_from_copy_listval(copy, values)
    let isfirst = true
    switch (typedef) {
    case vx_core.t_boolean:
      output = false
      if (type == vx_core.t_boolean) {
      } else if ((typeof copy) == 'boolean') {
        output = copy
      } else {
        output = copy['vx_value']
        const msgblockcopy = copy['vx_msgblock']
        if (msgblockcopy != undefined) {
          msgblock = msgblockcopy
        }
      }
      values.map(value => {
        switch (typeof value) {
        case 'boolean':
          if (isfirst) {
            isfirst = false
            output = value
          } else {
            output = output && value
          }
          break
        default:
          const valuetype = vx_core.f_typedef_from_any(value)
          switch (valuetype) {
          case vx_core.t_boolean:
            value = value['vx_value']
            if (isfirst) {
              isfirst = false
              output = value
            } else {
              output = output && value
            }
            break
          case vx_core.t_msgblock:
            msgblock = value
            break
          case vx_core.t_msg:
            msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, value)
            break
          default:
            const typename = vx_core.f_typename_from_typedef(typedef)
            const msg = vx_core.f_msg_from_error_2(
              'vx/core/new',
              'invalidvalue',
              vx_core.vx_new_map(vx_core.t_anymap, {
                type: type,
                value: vx_core.vx_string_from_any(value)
              })
            )
            msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, msg)
            break
          }
          break
        }
      })
      if (msgblock != vx_core.e_msgblock) {
        output = {
          vx_type: typedef,
          vx_value: output,
          vx_msgblock: msgblock
        }
      }
      break
    case vx_core.t_int:
      output = 0
      if (type == vx_core.t_int) {
      } else if ((typeof copy) == 'number') {
        output = copy
      } else {
        output = copy['vx_value']
        const msgblockcopy = copy['vx_msgblock']
        if (msgblockcopy != undefined) {
          msgblock = msgblockcopy
        }
      }
      values.map(value => {
        switch (typeof value) {
        case 'number':
          if (isfirst) {
            isfirst = false
            output = value
          } else {
            output += value
          }
          break
        case 'string':
          value = parseFloat(value)
          if (isfirst) {
            isfirst = false
            output = value
          } else {
            output += value
          }
          break
        default:
          const valuetype = vx_core.f_type_from_any(value)
          switch (valuetype) {
          case vx_core.t_int:
            value = value['vx_value']
            if (isfirst) {
              isfirst = false
              output = value
            } else {
              output = output + value
            }
            break
          case vx_core.t_float:
            value = value['vx_value']
            if (isfirst) {
              isfirst = false
              output = value
            } else {
              output += value
            }
            break
          case vx_core.t_string:
            value = parseFloat(value)
            if (isfirst) {
              isfirst = false
              output = value
            } else {
              output += value
            }
            break
          case vx_core.t_msgblock:
            msgblock = value
            break
          case vx_core.t_msg:
            msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, value)
            break
          default:
            const typename = vx_core.f_typename_from_typedef(typedef)
            const msg = vx_core.f_msg_from_error_2(
              'vx/core/new',
              'invalidvalue',
              vx_core.vx_new_map(vx_core.t_anymap, {
                type: type,
                value: vx_core.vx_string_from_any(value)
              })
            )
            msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, msg)
            break
          }
          break
        }
      })
      output = Math.round(output)
      if (msgblock != vx_core.e_msgblock) {
        output = {
          vx_type: typedef,
          vx_value: output,
          vx_msgblock: msgblock
        }
      }
      break
    case vx_core.t_float:
      output = 0.0
      if (type == vx_core.t_float) {
      } else if ((typeof copy) == 'number') {
        output = copy
      } else {
        output = copy['vx_value']
        const msgblockcopy = copy['vx_msgblock']
        if (msgblockcopy != undefined) {
          msgblock = msgblockcopy
        }
      }
      values.map(value => {
        switch (typeof value) {
        case 'number':
          if (isfirst) {
            isfirst = false
            output = value
          } else {
            output += value
          }
          break
        case 'string':
          value = parseFloat(value)
          if (isfirst) {
            isfirst = false
            output = value
          } else {
            output += value
          }
          break
        default:
          const valuetype = vx_core.f_type_from_any(value)
          switch (valuetype) {
          case vx_core.t_int:
          case vx_core.t_float:
            value = value['vx_value']
            if (isfirst) {
              isfirst = false
              output = value
            } else {
              output += value
            }
            break
          case vx_core.t_string:
            value = parseFloat(value['vx_value'])
            if (isfirst) {
              isfirst = false
              output = value
            } else {
              output += value
            }
            break
          case vx_core.t_msgblock:
            msgblock = value
            break
          case vx_core.t_msg:
            msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, value)
            break
          default:
            const typename = vx_core.f_typename_from_typedef(typedef)
            const msg = vx_core.f_msg_from_error_2(
              'vx/core/new',
              'invalidvalue',
              vx_core.vx_new_map(vx_core.t_anymap, {
                type: type,
                value: vx_core.vx_string_from_any(value)
              })
            )
            msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, msg)
            break
          }
        }
      })
      if (msgblock != vx_core.e_msgblock) {
        output = {
          vx_type: typedef,
          vx_value: output,
          vx_msgblock: msgblock
        }
      }
      break
    case vx_core.t_decimal:
      let vxdecimal = "0.0"
      if (type == vx_core.t_decimal) {
      } else if ((typeof copy) == 'number') {
        vxdecimal = "" + copy
      } else if ((typeof copy) == 'string') {
        vxdecimal = "" + copy
      } else if ((typeof copy) == 'string') {
        vxdecimal = "" + copy
      } else {
        const copytype = vx_core.f_type_from_any(copy)
        switch (copytype) {
        case vx_core.t_int:
        case vx_core.t_float:
          vxdecimal = "" + copy['vx_value']
          break
        case vx_core.t_decimal:
          vxdecimal = copy['vx_value']
          break
        case vx_core.t_string:
          vxdecimal = copy['vx_value']
          break
        }
      }
      values.map(value => {
        switch (typeof value) {
        case 'number':
          if (isfirst) {
            isfirst = false
            vxdecimal = "" + value
          } else {
            vxdecimal = "" + value
          }
          break
        case 'string':
          value = parseFloat(value)
          if (isfirst) {
            isfirst = false
            vxdecimal = "" + value
          } else {
            vxdecimal = "" + value
          }
          break
        default:
         const valuetype = vx_core.f_type_from_any(value)
         switch (valuetype) {
          case vx_core.t_int:
          case vx_core.t_float:
            vxdecimal = "" + value['vx_value']
            break
          case vx_core.t_string:
            vxdecimal = "" + parseFloat(value['vx_value'])
            break
          case vx_core.t_msgblock:
            msgblock = value
            break
          case vx_core.t_msg:
            msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, value)
            break
          default:
            const typename = vx_core.f_typename_from_typedef(typedef)
            const msg = vx_core.f_msg_from_error_2(
              'vx/core/new',
              'invalidvalue',
              vx_core.vx_new_map(vx_core.t_anymap, {
                type: type,
                value: vx_core.vx_string_from_any(value)
              })
            )
            msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, msg)
            break
          }
          break
        }
      })
      output = {
        vx_type: typedef,
        vx_value: vxdecimal,
        vx_msgblock: msgblock
      }
      break
    case vx_core.t_string:
      output = ''
      if (type == vx_core.t_string) {
      } else if ((typeof copy) == 'string') {
        output = copy
      } else {
        output = copy['vx_value']
        const msgblockcopy = copy['vx_msgblock']
        if (msgblockcopy != undefined) {
          msgblock = msgblockcopy
        }
      }
      values.map(value => {
        switch (typeof value) {
        case 'boolean':
          if (value) {
            output += 'true'
          } else {
            output += 'false'
          }
          break
        case 'number':
        case 'string':
          output += '' + value
          break
        default:
          const valuetype = vx_core.f_typedef_from_any(value)
          switch (valuetype) {
          case vx_core.t_int:
          case vx_core.t_float:
            output += '' + value
            break
          case vx_core.t_string:
            output += value
            break
          case vx_core.t_msgblock:
            msgblock = value
            break
          case vx_core.t_msg:
            msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, value)
            break
          default:
            const typename = vx_core.f_typename_from_typedef(typedef)
            const msg = vx_core.f_msg_from_error_2(
              'vx/core/new',
              'invalidvalue',
              vx_core.vx_new_map(vx_core.t_anymap, {
                type: type,
                value: vx_core.vx_string_from_any(value)
              })
            )
            msgblock = vx_core.f_msgblock_from_msgblock_msg(
              msgblock, msg
            )
            break
          }
          break
        }
      })
      if (msgblock != vx_core.e_msgblock) {
        output = {
          vx_type: typedef,
          vx_value: output,
          vx_msgblock: msgblock
        }
      }
      break
    default:
      let allowany = false
      let allowtypes = []
      let key = ''
      let propmap = {}
      const extend = vx_core.f_extends_from_typedef(typedef)
      switch (extend) {
      case ':func':
        // output = vx_core.f_mempool-getvalue()
        let fn = null
        const empty = vx_core.f_empty(typedef)
        if (type == typedef) {
        } else {
          fn = copy['vx_value']
          const msgblockcopy = copy['vx_msgblock']
          if (msgblockcopy != undefined) {
            msgblock = msgblockcopy
          }
        }
        values.map(value => {
          if (value == empty) {
          } else if ((typeof value) == 'function') {
            fn = value
          } else {
            const valuetype = vx_core.f_type_from_any(value)
            if (value == valuetype) {
              fn = valuetype['vx_value']['fn']
            } else {
              switch (valuetype) {
              case vx_core.t_msgblock:
                msgblock = value
                break
              case vx_core.t_msg:
                msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, value)
                break
              default:
                const typename = vx_core.f_typename_from_typedef(typedef)
                const msg = vx_core.f_msg_from_error_2(
                  'vx/core/new',
                  'invalidvalue',
                  vx_core.vx_new_map(vx_core.t_anymap, {
                    type: type,
                    value: vx_core.vx_string_from_any(value)
                  })
                )
                msgblock = vx_core.f_msgblock_from_msgblock_msg(
                  msgblock, msg
                )
                break
              }
            }
          }
        })
        if ((fn != null) || (msgblock != vx_core.e_msgblock)) {
          output = {}
          output['vx_type'] = typedef
          if (fn != null) {
            output['vx_value'] = fn
          }
          if (msgblock != vx_core.e_msgblock) {
            output['vx_msgblock'] = msgblock
          }
        } else {
          output = empty
        }
        break
      case ':list':
        // output = vx_core.f_mempool-getvalue()
        let listvals = []
        if (type == typedef) {
        } else {
          listvals = copy.slice()
          const msgblockcopy = copy['vx_msgblock']
          if (msgblockcopy != undefined) {
            msgblock = msgblockcopy
          }
        }
        allowtypes = vx_core.f_allowtypes_from_typedef(typedef)
        if (allowtypes.includes(vx_core.t_any)) {
          allowany = true
        }
        values.map(value => {
          const valuetype = vx_core.f_type_from_any(value)
          let isfound = false
          if (allowany) {
            listvals.push(value)
            isfound = true
          } else if (vx_core.f_is_empty(value)) {
            isfound = true
          } else if (typedef == valuetype) {
            listvals.push(...value)
            isfound = true
          } else if (allowtypes.includes(valuetype)) {
            switch (type) {
            case vx_core.t_msglist:
            case vx_core.t_msgblocklist:
              if (!listvals.includes(value)) {
                listvals.push(value)
              }
              isfound = true
              break
            default:
              listvals.push(value)
              isfound = true
              break
            }
          } else {
            switch (valuetype) {
            case vx_core.t_msgblock:
              msgblock = value
              isfound = true
              break
            case vx_core.t_msg:
              msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, value)
              isfound = true
              break
            default:
              const valuetraits = vx_core.f_traits_from_typedef(valuetype)
              const intersection = allowtypes.filter(function(n) {
                return valuetraits.indexOf(n) > -1
              })
              if (intersection.length > 0) {
                listvals.push(value)
                isfound = true
              }
              break
            }
          }
          if (!isfound) {
            const typename = vx_core.f_typename_from_typedef(typedef)
            const msg = vx_core.f_msg_from_error_2(
              'vx/core/new',
              'invalidvalue',
              vx_core.vx_new_map(vx_core.t_anymap, {
                type: type,
                value: vx_core.vx_string_from_any(value)
              })
            )
            msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, msg)
          }
        })
        if ((listvals.length > 0) || (msgblock != vx_core.e_msgblock)) {
          output = listvals
          output['vx_type'] = typedef
          if (msgblock != vx_core.e_msgblock) {
            output['vx_msgblock'] = msgblock
          }
        } else {
          output = vx_core.f_empty(typedef)
        }
        break
      case ':map':
        if (type != typedef) {
          propmap = Object.assign({}, copy['vx_value'])
          const msgblockcopy = copy['vx_msgblock']
          if (msgblockcopy != undefined) {
            msgblock = msgblockcopy
          }
        }
        allowtypes = vx_core.f_allowtypes_from_typedef(typedef)
        if (allowtypes.includes(vx_core.t_any)) {
          allowany = true
        }
        values.map(value => {
          const valuetype = vx_core.f_type_from_any(value)
          if (key == '') {
            switch (valuetype) {
            case vx_core.t_string:
              if ((typeof value) == 'string') {
                key = value
              } else {
                key = value['vx_value']
              }
              if (key.startsWith(':')) {
                key = key.substring(1)
              }
              break
            case vx_core.t_msgblock:
              msgblock = value
              break
            case vx_core.t_msg:
              msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, value)
              break
            default:
              if (typedef == valuetype) {
                propmap = Object.assign(propmap, value['vx_value'])
              } else {
                const msg = vx_core.f_msg_from_error_2(
                  'vx/core/new',
                  'invalidkey',
                  vx_core.vx_new_map(vx_core.t_anymap, {
                    type: type,
                    key: vx_core.vx_string_from_any(value)
                  })
                )
                msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, msg)
              }
              break
            }
          } else {
            if (vx_core.f_is_empty(value)) {
              delete propmap[key]
            } else if (allowany) {
              propmap[key] = value
            } else if (allowtypes.includes(valuetype)) {
              propmap[key] = value
            } else {
              const valuetraits = vx_core.f_traits_from_typedef(valuetype)
              const intersection = allowtypes.filter(function(n) {
                return valuetraits.indexOf(n) > -1
              })
              if (intersection.length > 0) {
                propmap[key] = value
              } else {
                const typename = vx_core.f_typename_from_typedef(typedef)
                const msg = vx_core.f_msg_from_error_2(
                  'vx/core/new',
                  'invalidkeyvalue',
                  vx_core.vx_new_map(vx_core.t_anymap, {
                    type: type,
                    key: key,
                    value: vx_core.vx_string_from_any(value)
                  })
                )
                msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, msg)
              }
            }
            key = ''
          }
        })
        // output = vx_core.f_mempool-getvalue()
        if ((Object.keys(propmap).length > 0) || (msgblock != vx_core.e_msgblock)) {
          output = {
            vx_type: typedef,
            vx_value: propmap
          }
          if (msgblock != vx_core.e_msgblock) {
            output['vx_msgblock'] = msgblock
          }
        } else {
          output = vx_core.f_empty(typedef)
        }
        break
      case ':struct':
        switch (typedef) {
        case vx_core.t_msgblock:
        case type:
          break
        default:
          propmap = Object.assign({}, copy['vx_value'])
          const msgblockcopy = copy['vx_msgblock']
          if (msgblockcopy != undefined) {
            msgblock = msgblockcopy
          }
          break
        }
        if (values.length > 0) {
          const properties = vx_core.f_properties_from_typedef(typedef)
          const lastprop = vx_core.f_proplast_from_typedef(typedef)
          const validkeys = Object.keys(properties)
          let lastpropname = ''
          let lasttype = null
          let lastallowtypes = []
          const ismulti = lastprop['multi']
          if (ismulti) {
            lastpropname = lastprop['name']
            lasttype = lastprop['type']
            lastallowtypes = vx_core.f_allowtypes_from_typedef(lasttype)
          }
          let testkey = ''
          values.map(value => {
            const valuetype = vx_core.f_type_from_any(value)
            if (key == '') {
              switch (valuetype) {
              case vx_core.t_string:
                if ((typeof value) == 'string') {
                  testkey = value
                } else {
                  testkey = value['vx_value']
                }
                if (testkey.startsWith(':')) {
                  testkey = testkey.substring(1)
                }
                if (validkeys.includes(testkey)) {
                  key = testkey
                } else {
                  const typename = vx_core.f_typename_from_typedef(typedef)
                  const msg = vx_core.f_msg_from_error_2(
                    'vx/core/new',
                    'invalidkey',
                    vx_core.vx_new_map(vx_core.t_anymap, {
                      type: type,
                      key: vx_core.vx_string_from_any(value)
                    })
                  )
                  msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, msg)
                }
                break
              case vx_core.t_msgblock:
                switch (typedef) {
                case vx_core.t_msg:
                  // invalid msg cannot contain msgblock
                  break
                case vx_core.t_msgblock:
                  if (value == vx_core.e_msgblock) {
                  } else if (msgblock == vx_core.e_msgblock) {
                    msgblock = value
                    propmap = Object.assign({}, value['vx_value'])
                  } else {
                    let msgblocks = propmap['msgblocks']
                    if (msgblocks == undefined) {
                      msgblocks = [value]
                      msgblocks['vx_type'] = vx_core.t_msgblocklist
                    } else {
                      msgblocks.push(value)
                    }
                    propmap['msgblocks'] = msgblocks
                  }
                  break
                default:
                  msgblock = vx_core.f_msgblock_from_msgblock_msgblock(msgblock, value)
                  break
                }
                break
              case vx_core.t_msg:
                switch (typedef) {
                case vx_core.t_msg:
                  // invalid msg cannot contain msg
                  break
                case vx_core.t_msgblock:
                  let msgs = propmap['msgs']
                  if (msgs == undefined) {
                    msgs = [value]
                    msgs['vx_type'] = vx_core.t_msglist
                  } else {
                    msgs.push(value)
                  }
                  propmap['msgs'] = msgs
                  break
                default:
                  msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, value)
                  break
                }
                break
              default:
                let isfound = false
                if (!ismulti) {
                } else if (lasttype == vx_core.t_any) {
                  isfound = true
                } else if (lasttype == valuetype) {
                  isfound = true
                } else if (lastallowtypes.length > 0) {
                  if (lastallowtypes.includes(valuetype)) {
                    isfound = true
                  } else {
                    const valuetraits = vx_core.f_traits_from_typedef(valuetype)
                    const intersection = lastallowtypes.filter(function(n) {
                      return valuetraits.indexOf(n) > -1
                    })
                    if (intersection.length > 0) {
                      isfound = true
                    }
                  }
                }
                if (isfound) {
                  let lastpropvalue = propmap[lastpropname]
                  if (lastpropvalue == undefined) {
                    lastpropvalue = []
                    lastpropvalue['vx_type'] = lasttype
                    propmap[lastpropname] = lastpropvalue
                  }
                  if (lasttype == valuetype) {
                    lastpropvalue.push(...value)
                  } else {
                    lastpropvalue.push(value)
                  }
                } else {
                  const typename = vx_core.f_typename_from_typedef(typedef)
                  const msg = vx_core.f_msg_from_error_2(
                    'vx/core/new',
                    'invalidkey',
                    vx_core.vx_new_map(vx_core.t_anymap, {
                      type: type,
                      key: vx_core.vx_string_from_any(value)
                    })
                  )
                  msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, msg)
                }
                break
              }
            } else {
              const property = properties[key]
              const propertytype = property['type']
              if (value !== false && value !== 0 && value !== "" && vx_core.f_is_empty_1(value)) {
                delete propmap[key]
              } else if (propertytype == vx_core.t_any) {
                propmap[key] = value
              } else if (propertytype == valuetype) {
                propmap[key] = value
              } else if ((propertytype.extends == ":func") == (valuetype.extends == ":func")) {
                propmap[key] = value
              } else {
                const typename = vx_core.f_typename_from_typedef(typedef)
                const msg = vx_core.f_msg_from_error_2(
                  'vx/core/new',
                  'invalidkeyvalue',
                  vx_core.vx_new_map(vx_core.t_anymap, {
                    type: type,
                    key: key,
                    value: vx_core.vx_string_from_any(value)
                  })
                )
                msgblock = vx_core.f_msgblock_from_msgblock_msg(msgblock, msg)
              }
              key = ''
            }
          })
        }
        // output = vx_core.f_mempool-getvalue()
        if ((Object.keys(propmap).length > 0) || (msgblock != vx_core.e_msgblock)) {
          output = {
            vx_type: typedef,
            vx_value: propmap
          }
          if (msgblock == vx_core.e_msgblock) {
          } else if (typedef == vx_core.t_msgblock) {
          } else {
            output['vx_msgblock'] = msgblock
          }
        } else {
          output = vx_core.f_empty(typedef)
        }
        break
      }
      break
    }
    return output
  }

  static vx_new_1(
    generic_any_1,
    values
  ) {
    let output = vx_core.vx_new(generic_any_1, values)
    return output
  }

  static vx_new_list(
    type,
    listvalue
  ) {
    const output = listvalue.slice()
    output['vx_type'] = type
    return output
  }

  static vx_new_map(
    type,
    mapvalue
  ) {
    const output = {
      vx_type: type,
      vx_value: mapvalue
    }
    return output
  }

  static vx_new_struct(
    type,
    mapvalue
  ) {
    const output = {
      vx_type: type,
      vx_value: mapvalue
    }
    return output
  }

  static vx_string_from_any(
    value
  ) {
    const output = vx_core.vx_string_from_any_indent(
      value, 0, false
    )
    return output
  }

  static vx_string_from_any_indent(
    value,
    indent,
    linefeed
  ) {
    let output = ''
    const indenttext = ' '.repeat(indent)
    let text = ''
    const typedef = vx_core.f_typedef_from_any(value)
    if (indent > 50) {
      text = 'Error: Max Depth Exceeded'
    } else if (value == null) {
      text = 'null'
    } else if (value == typedef) {
      text = vx_core.f_typename_from_typedef(typedef)
    } else if (value['vx_constdef']) {
      const constdef = value['vx_constdef']
      const constpkg = constdef['pkgname']
      const constname = constdef['name']
      if (constpkg == 'vx/core') {
        text = constname
      } else {
        text = constpkg + '/' + constname
      }
    } else {
      switch (typedef) {
      case vx_core.t_boolean:
        if (value == true) {
          text = 'true'
        } else {
          text = 'false'
        }
        break
      case vx_core.t_float:
        text = '' + value
        if (text.endsWith('.0')) {
          text = text.substring(0, text.length() - 2)
        }
        break
      case vx_core.t_int:
        if (value == vx_core.c_notanumber) {
          text = 'notanumber'
        } else if (value == vx_core.c_infinity) {
          text = 'infinity'
        } else if (value == vx_core.c_neginfinity) {
          text = 'neginfinity'
        } else {
          text = '' + value
        }
        break
      case vx_core.t_string:
        text = value.replaceAll("\"", "\\\"")
        text = '\"' + text + '\"'
        break
      case vx_core.t_decimal:
        text = '' + value['vx_value']
        if (value['vx_msgblock'] != null) {
          const msgtext = vx_core.vx_string_from_any_indent(
            value['vx_msgblock'], indent, linefeed
          )
          text += '\n ' + indenttext + msgtext
        }
        text = '(decimal ' + text + ')'
        break
      default:
        const typedefname = typedef['vx_value']['name']
        const extend = vx_core.f_extends_from_typedef(typedef)
        const indent1 = indent + 1
        const indent2 = indent + 2
        switch (extend) {
        case ':list':
          for (const valsub of value) {
            const valtext = vx_core.vx_string_from_any_indent(valsub, indent1, linefeed)
            text += '\n ' + indenttext + valtext
          }
          if (value['vx_msgblock'] != null) {
            const msgtext = vx_core.vx_string_from_any_indent(value['vx_msgblock'], indent, linefeed)
            text += '\n ' + indenttext + msgtext
          }
          text = '(' + typedefname + text + ')'
          break
        case ':map':
        case ':struct':
          const valmap = value['vx_value']
          let validkeys
          switch (extend) {
          case ':map':
            validkeys = Object.keys(valmap)
            break
          case ':struct':
            const properties = vx_core.f_properties_from_typedef(typedef)
            validkeys = Object.keys(properties)
            break
          }
          for (let key of validkeys) {
            const valsub = valmap[key]
            if (valsub) {
              if (!key.startsWith(':')) {
                key = ':' + key
              }
              let valtext = vx_core.vx_string_from_any_indent(valsub, indent2, linefeed)
              if (valtext.indexOf('\n') >= 0) {
                valtext = '\n  ' + indenttext + valtext
              } else {
                valtext = ' ' + valtext
              }
              text += '\n' + indenttext + ' ' + key + valtext
            }
          }
          if (value['vx_msgblock'] != null) {
            const msgtext = vx_core.vx_string_from_any_indent(value['vx_msgblock'], indent1, linefeed)
            text += '\n ' + indenttext + msgtext
          }
          text = '(' + typedefname + text + ')'
          break
        case ':func':
          text = typedefname
          if (value['vx_msgblock'] != null) {
            const msgtext = vx_core.vx_string_from_any_indent(value['vx_msgblock'], indent1, linefeed)
            text += '\n ' + indenttext + msgtext
          }
          text = '(' + text + ')'
          break
        }
        break
      }
    }
    output = text
    return output
  }

  // vx_string_from_string_find_replace(string, string, string)
  static vx_string_from_string_find_replace(
    text,
    find,
    replace
  ) {
    const output = text.replaceAll(find, replace);
    return output;
  }

  // vx_string_from_string_start_end(string, int, int)
  static vx_string_from_string_start_end(
    text,
    start,
    end
  ) {
    let output = ""
    const maxlen = text.length
    if (end < 0) {
     end += maxlen
    }
    if (start < 1) {
    } else if (start > end) {
    } else if (start > maxlen) {
    } else {
      if (end > maxlen) {
        end = maxlen
      }
      output = text.substring(start - 1, end)
    }
    return output
  }
